# Generated by Django 2.2.4 on 2019-08-27 14:01

from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ('models', '0001_initial'),
    ]

    def add_buyer_seller(self, schema_editor):
        customer_model = self.get_model('models', 'Customers')
        customer_model.objects.update_or_create(first_name="Aman", password='Qwerty12345',
                                                username='aman', email='aman@gmail.com')
        customer_model.objects.update_or_create(first_name='Deepak', password='Qwerty12345',
                                                username='deepak', email='deepak@gmail.com', is_seller=True)

    def add_address(self, schema_editor):
        customer_model = self.get_model('models', 'Customers')
        address_model = self.get_model('models', 'Addresses')
        customer_address_model = self.get_model('models', 'CustomerAddress')

        address_model.objects.update_or_create(billing_address='80/2 Wolf Street',
                                               shipping_address='80/2 Wolf Street', city='Faridabad',
                                               state='Haryana', country='India')

        user = customer_model.objects.get(username='aman')
        address = address_model.objects.get(billing_address='80/2 Wolf Street')
        customer_address_model.objects.update_or_create(users=user, address=address)

        seller_address_model = self.get_model('models', 'SellerAddress')
        user = customer_model.objects.get(username='deepak')
        seller_address_model.objects.update_or_create(users=user, company_name='Flack', address='20/3 Wish Street',
                                                      city='Faridabad', state='Haryana', country='India',
                                                      postal_code=121856)

    def add_products(self, schema_editor):
        product_category_model = self.get_model('models', 'ProductCategory')
        product_category_model.objects.update_or_create(category='Electronics', description='Electronic Goods',
                                                        seo_title='Electronics', seo_description='Electronic Goods')
        product_category_model.objects.update_or_create(category='Mens', description='Mens Wear',
                                                        seo_title='Mens', seo_description='Mens Wear')

        products_model = self.get_model('models', 'Products')
        get_category = product_category_model.objects.get(category='Electronics')
        products_model.objects.update_or_create(category=get_category, name='Washing Machine',
                                                description='Good machine', price=10000, quantity=5, is_published=True,
                                                seo_title='Washing Machine', seo_description='Good WM', tax=5,
                                                weight=6.5)
        products_model.objects.update_or_create(category=get_category, name='One Plus 7',
                                                description='Mobile Phone', price=60000, quantity=15, is_published=True,
                                                seo_title='One Plus 7', seo_description='Good Mobile Phone', tax=18,
                                                weight=0.6)

        get_category = product_category_model.objects.get(category='Mens')
        products_model.objects.update_or_create(category=get_category, name='Rolex Watch',
                                                description='Good watch', price=8000, quantity=2, is_published=True,
                                                seo_title='Rolex', seo_description='Good watch', tax=5,
                                                weight=0.7)
        products_model.objects.update_or_create(category=get_category, name='Shoes',
                                                description='Sports shoes', price=2999, quantity=10, is_published=True,
                                                seo_title='Shoes', seo_description='Sports Shoes', tax=2,
                                                weight=0.9)

    def add_product_color(self, schema_model):
        color_model = self.get_model('models', 'ProductColors')
        product_model = self.get_model('models', 'Products')

        get_product = product_model.objects.get(id=1)

        color1 = color_model(color='Black')
        color1.save()
        color1.product.set([get_product])

        color2 = color_model(color='White')
        color2.save()
        color2.product.set([get_product])

    def add_discounts(self, schema_editor):
        discounts_model = self.get_model('models', 'Discounts')
        discounts_model.objects.update_or_create(name='Discount1', code='Dis1', usage_limit=10, is_active=True,
                                                 discount_value=150, min_amount_spent=1500)
        discounts_model.objects.update_or_create(name='Discount2', code='Dis2', usage_limit=5, is_active=True,
                                                 discount_value=500, min_amount_spent=5000)
        discounts_model.objects.update_or_create(name='Discount3', code='Dis3', usage_limit=15, is_active=True,
                                                 discount_value=5000, min_amount_spent=10000)
        discounts_model.objects.update_or_create(name='Discount4', code='Dis4', usage_limit=8, is_active=True,
                                                 discount_value=3600, min_amount_spent=8000)

    def add_shipping_zones(self, schema_editor):
        shipping_zones_model = self.get_model('models', 'ShippingZones')
        shipping_zones_model.objects.update_or_create(name='Zone1', countries='India', city='Faridabad', area='Haryana',
                                                      postal_code=121006)
        shipping_zones_model.objects.update_or_create(name='Zone2', countries='India', city='Noida',
                                                      area='Uttar Pradesh', postal_code=121558)

    def add_shipping_methods(self, schema_editor):
        shipping_zones_model = self.get_model('models', 'ShippingZones')
        shipping_methods_model = self.get_model('models', 'ShippingMethods')

        zone = shipping_zones_model.objects.get(name='Zone1')
        shipping_methods_model.objects.update_or_create(zone=zone, name='FastDelivery', max_order_price=80000,
                                                        max_order_weight=10, min_order_price=100, min_order_weight=0.1,
                                                        price=500, type='Type1')

        zone = shipping_zones_model.objects.get(name='Zone2')
        shipping_methods_model.objects.update_or_create(zone=zone, name='FastDelivery', max_order_price=80000,
                                                        max_order_weight=10, min_order_price=100, min_order_weight=0.1,
                                                        price=500, type='Type1')
        shipping_methods_model.objects.update_or_create(zone=zone, name='DeliverGo', max_order_price=90000,
                                                        max_order_weight=100, min_order_price=100, min_order_weight=0.1,
                                                        price=5000, type='Type2')

    def add_orders(self, schema_editor):
        orders_model = self.get_model('models', 'Orders')
        address_model = self.get_model('models', 'CustomerAddress')
        discount_model = self.get_model('models', 'Discounts')
        products_model = self.get_model('models', 'Products')
        shipping_method_model = self.get_model('models', 'ShippingMethods')

        orders_model.objects.update_or_create(address=address_model.objects.get(users_id=1),
                                              discount=discount_model.objects.get(name='Discount1'),
                                              products=products_model.objects.get(name='One Plus 7'),
                                              shipping_method=shipping_method_model.objects.get(zone_id=2,
                                                                                                name='FastDelivery'),
                                              tracking_number=258745, total_net=65000, status='unshipped')

    def add_payments(self, schema_editor):
        payments_model = self.get_model('models', 'Payments')
        seller_model = self.get_model('models', 'SellerAddress')
        orders_model = self.get_model('models', 'Orders')

        seller = seller_model.objects.get(company_name='Flack')
        orders = orders_model.objects.get(id=1)

        payments_model.objects.update_or_create(seller=seller, orders=orders, gateway='gateway1', cc_name='AMAN',
                                                cc_exp_month=6, cc_exp_year=25, cc_first_digits=4785,
                                                cc_last_digits=4250)

    def add_wishlist_items(self, schema_editor):
        wishlist_items_model = self.get_model('models', 'WishlistItems')
        user_model = self.get_model('models', 'Customers')
        product_model = self.get_model('models', 'Products')

        user = user_model.objects.get(id=1)
        products = product_model.objects.get(id=1)
        items = wishlist_items_model(user=user)
        items.save()
        items.products.set([products])

    operations = [
        migrations.RunPython(add_buyer_seller, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(add_address, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(add_products, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(add_product_color, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(add_discounts, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(add_shipping_zones, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(add_shipping_methods, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(add_orders, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(add_payments, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(add_wishlist_items, reverse_code=migrations.RunPython.noop),
    ]
